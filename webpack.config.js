const path = require("path");
const autoprefixer = require("autoprefixer"); // webpack config uses Node JS so it uses require syntax etc
const htmlWebpackPlugin = require("html-webpack-plugin");

module.exports = {
  devtool: "cheap-module-eval-source-map", // configs the type of sources maps generated, this is best
  entry: "./src/index.js", // where the app should be loaded from
  output: {
    path: path.resolve(__dirname, "dist"), // Where to put the dist folder
    filename: "bundle.js", // what to name buidl file
    chunkFilename: "[id].js", // filenames for lazy loaded code
    publicPath: ""
  }, // the build output
  resolve: { extensions: [".js", ".jsx"] }, // the file extensions to build
  module: {
    rules: [
      { test: /\.js$/, loader: "babel-loader", exclude: /node_modules/ }, // what to do for js files, what loader to use what to exclude from build
      {
        test: /\.css$/, // what to do for css files, what loaders to use what to exclude from build
        use: [
          { loader: "style-loader" }, // order of loaders is bottom to top and matters
          {
            loader: "css-loader",
            options: {
              importLoaders: 1, // Lets css-loader know one loader is run before it e.g. postcss-loader
              modules: true, // enables css modules
              localIdentName: "[name]__[local]__[hash:base64:5]" //configs for the classnames generated by css modules
            }
          },
          {
            loader: "postcss-loader",
            options: {
              ident: "postcss",
              plugins: () => [
                autoprefixer({ browsers: ["> 1%", "last 2 versions"] }) // will create auto prefixs for css so it works on all browsers
              ]
            }
          }
        ],
        exclude: /node_modules/
      },
      {
        test: /\.(png|jpe?g|gif)$/, // what to do for image files (png, jpe, jpeg, gif), what loader to use what to exclude from build
        loader: "url-loader?limit=80000&name=images/[name].[ext] file-loader"
      } /* configures webpack to use the url-loader, includes a queryparam to set the max file size limit = 80kb and name = folder to store images in (images folder) and
      files should be formatted as filename.extensions e.g. pizza.png*/
    ]
  },
  plugins: [
    // configs webpack plugins
    new htmlWebpackPlugin({
      template: __dirname + "/src/index.html",
      filename: "index.html", //the output file, running server its tored in memory, in build its an actual file
      inject: "body"
    })
  ] // this plugin connects webpack to the index.html file
};
